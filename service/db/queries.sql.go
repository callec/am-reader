// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addMagazine = `-- name: AddMagazine :execresult
INSERT INTO magazines (
	number,
	date,
	location
) VALUES (
	?, ?, ?
)
`

type AddMagazineParams struct {
	Number   int64
	Date     int64
	Location string
}

func (q *Queries) AddMagazine(ctx context.Context, arg AddMagazineParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addMagazine, arg.Number, arg.Date, arg.Location)
}

const addUName = `-- name: AddUName :execresult
INSERT INTO unames (
    uid,
    uname
) VALUES (
    ?, ?
)
`

type AddUNameParams struct {
	Uid   string
	Uname string
}

func (q *Queries) AddUName(ctx context.Context, arg AddUNameParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUName, arg.Uid, arg.Uname)
}

const getMagazine = `-- name: GetMagazine :one
SELECT id, inserted, number, date, location FROM magazines
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMagazine(ctx context.Context, id string) (Magazine, error) {
	row := q.db.QueryRowContext(ctx, getMagazine, id)
	var i Magazine
	err := row.Scan(
		&i.ID,
		&i.Inserted,
		&i.Number,
		&i.Date,
		&i.Location,
	)
	return i, err
}

const getMagazineByNumber = `-- name: GetMagazineByNumber :one
SELECT id, inserted, number, date, location FROM magazines
WHERE number = ? LIMIT 1
`

func (q *Queries) GetMagazineByNumber(ctx context.Context, number int64) (Magazine, error) {
	row := q.db.QueryRowContext(ctx, getMagazineByNumber, number)
	var i Magazine
	err := row.Scan(
		&i.ID,
		&i.Inserted,
		&i.Number,
		&i.Date,
		&i.Location,
	)
	return i, err
}

const getUid = `-- name: GetUid :one
SELECT uid FROM unames
WHERE uname = ? LIMIT 1
`

func (q *Queries) GetUid(ctx context.Context, uname string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUid, uname)
	var uid string
	err := row.Scan(&uid)
	return uid, err
}

const getUser = `-- name: GetUser :one
SELECT id, pwd, created, lastonline FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Pwd,
		&i.Created,
		&i.Lastonline,
	)
	return i, err
}

const listMagazines = `-- name: ListMagazines :many
SELECT id, inserted, number, date, location FROM magazines
ORDER BY date
LIMIT ? OFFSET ?
`

type ListMagazinesParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListMagazines(ctx context.Context, arg ListMagazinesParams) ([]Magazine, error) {
	rows, err := q.db.QueryContext(ctx, listMagazines, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Magazine
	for rows.Next() {
		var i Magazine
		if err := rows.Scan(
			&i.ID,
			&i.Inserted,
			&i.Number,
			&i.Date,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (
    pwd
) VALUES (
    ?
) RETURNING id
`

func (q *Queries) RegisterUser(ctx context.Context, pwd string) (string, error) {
	row := q.db.QueryRowContext(ctx, registerUser, pwd)
	var id string
	err := row.Scan(&id)
	return id, err
}

const removeMagazine = `-- name: RemoveMagazine :exec
DELETE FROM magazines
WHERE id = ?
`

func (q *Queries) RemoveMagazine(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, removeMagazine, id)
	return err
}
